% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/same-functions.R, R/same-number.R
\name{same_number}
\alias{same_number}
\title{Compare Number Similarity Across Multiple Lists}
\usage{
same_number(
  ...,
  method = c("percent_diff", "fuzzy"),
  epsilon = NULL,
  max_diff = NULL
)

same_number(
  ...,
  method = c("percent_diff", "fuzzy"),
  epsilon = NULL,
  max_diff = NULL
)
}
\arguments{
\item{...}{Two or more lists containing numeric values to compare}

\item{method}{Character vector specifying similarity methods. Default c("percent_diff", "fuzzy")}

\item{epsilon}{Threshold for fuzzy matching. NULL for auto-calculation}

\item{max_diff}{Maximum difference for normalization. NULL for auto-calculation}
}
\value{
A similarity object for numeric data that works with print(), summary(),
average_similarity(), pair_averages(), and plot() methods.

An S3 object of class "same_number" that contains an S7 'similar_number' object
and provides methods for average_similarity(), pair_averages(), plot(), print(), and summary().
}
\description{
Computes similarity scores between two or more lists of numeric values using multiple comparison methods.
}
\examples{
list1 <- list(1, 2, 3, 4, 5)
list2 <- list(1.1, 2.2, 3, 4.1, 5)
result <- same_number(list1, list2, method = "fuzzy")
print(result)

# Compare with multiple methods
result2 <- same_number(list1, list2, method = c("exact", "fuzzy", "normalized"))

# Compare multiple lists
list3 <- list(1, 2.1, 3.2, 4, 5.1)
result3 <- same_number(list1, list2, list3, method = "normalized")

# Using nested list structure
nested1 <- list(list(1, 2), list(3, 4))
nested2 <- list(list(1.1, 2.2), list(3, 4.1))
nested_result <- same_number(nested1, nested2)
nums1 <- list(1, 2, 3)
nums2 <- list(1, 2.1, 3.2)
result <- same_number(nums1, nums2)
print(result)

}
